// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/30/2022 06:47:58"
                                                                                
// Verilog Test Bench template for design : RiscV
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module RiscV_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg a;
reg b;
// wires                                               
wire c;
wire d;

// assign statements (if any)                          
RiscV i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d)
);

initial                                                
begin
	a = 1'b0;
	
	forever #20 a = ~a;
	
	#1000 $stop;
end   

initial                                                
begin
	b = 1'b1;
	forever #30 b = ~b;
	
	#1000 $stop;
end                                                    


                                                  
endmodule

